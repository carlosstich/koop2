var _ = require('lodash')
var ref = require('./colorRamps');
var createColorRamp = ref.createColorRamp;
var ref$1 = require('./createSymbol');
var createSymbol = ref$1.createSymbol;

module.exports = { createClassBreakInfos: createClassBreakInfos, createUniqueValueInfos: createUniqueValueInfos }

var renderers = {
  classBreakInfos: require('../../templates/renderers/classification/classBreakInfos.json'),
  uniqueValueInfos: require('../../templates/renderers/classification/uniqueValueInfos.json')
}

function createClassBreakInfos (breaks, classification, geomType) {
  var ref = setSymbology(breaks, classification);
  var colorRamp = ref.colorRamp;
  var baseSymbol = ref.baseSymbol;

  return breaks.map(function (currBreak, index) {
    var json = _.cloneDeep(renderers.classBreakInfos)
    json.classMaxValue = currBreak[1]
    json.classMinValue = currBreak[0]
    json.label = (json.classMinValue) + "-" + (json.classMaxValue)
    json.description = '' // TODO: ? fill in description
    json.symbol = createSymbol(baseSymbol, colorRamp[index], geomType)
    return json
  })
}

function createUniqueValueInfos (breaks, classification, geomType) {
  var ref = setSymbology(breaks, classification);
  var colorRamp = ref.colorRamp;
  var baseSymbol = ref.baseSymbol;

  // check that unique value fields are congruous
  if (!classification.uniqueValueFields.map(function (field) {
    Object.keys(breaks[0]).includes(field)
  })) {
    throw new Error(
      'Unique value fields are incongruous: ' +
      Object.keys(breaks[0]) +
      classification.uniqueValueFields)
  }

  return breaks.map(function (currBreak, index) {
    var json = _.cloneDeep(renderers.uniqueValueInfos)
    json.value = parseUniqueValues(currBreak, classification.fieldDelimiter)
    json.count = currBreak.count
    json.label = json.value
    json.description = '' // TODO: ? fill in description
    json.symbol = createSymbol(baseSymbol, colorRamp[index], geomType)
    return json
  })
}

function parseUniqueValues (currBreak, delimiter) {
  var thisBreak = _.cloneDeep(currBreak)
  delete thisBreak.count
  return Object.keys(thisBreak).map(function (key) { return thisBreak[key]; }).join(delimiter)
}

function setSymbology (breaks, classification) {
  var inputRamp = classification && classification.colorRamp ? classification.colorRamp : undefined
  var colorRamp = createColorRamp(breaks, inputRamp)
  var baseSymbol
  if (classification && classification.baseSymbol) { baseSymbol = classification.baseSymbol }
  return { colorRamp: colorRamp, baseSymbol: baseSymbol }
}
