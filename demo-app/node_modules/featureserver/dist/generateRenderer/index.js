var Winnow = require('winnow')
var ref = require('./getGeom');
var getGeom = ref.getGeom;
var ref$1 = require('../templates');
var renderClassBreaks = ref$1.renderClassBreaks;
var renderUniqueValue = ref$1.renderUniqueValue;

module.exports = generateRenderer

/**
 * processes params based on generate renderer params
 *
 * @param {object} data
 * @param {object} params
 * @param {function} callback
 */
function generateRenderer (data, params) {
  if ( data === void 0 ) data = {};
  if ( params === void 0 ) params = {};

  if (Object.keys(data).length === 0) { throw new Error('there must be input features in order to generate a renderer') }

  var breaks = []
  if (data.statistics && data.statistics.classBreaks) {
    breaks = data.statistics.classBreaks.sort(function (a, b) { return a - b; })
    return renderClassBreaks(breaks, {}, '')
  } else if (data.features) { breaks = Winnow.query(data, params) }
  else { throw new Error('Must supply statistics or data features') }
  // TODO: ? handle uniqueValue statistics

  if (params.classificationDef && params.classificationDef.type) {
    var geomType = getGeom(data, params)
    var classification = params.classificationDef
    if (classification.type && classification.type === 'classBreaksDef') {
      return renderClassBreaks(breaks, classification, geomType)
    } else if (classification.type && classification.type === 'uniqueValueDef') {
      return renderUniqueValue(breaks, classification, geomType)
    } else { throw new Error('invalid classification type: ', classification.type) }
  } else { throw new Error('invalid classification: ', params.classificationDef) }
}
