var _ = require('lodash')
var chroma = require('chroma-js')

module.exports = { createColorRamp: createColorRamp }

var renderers = {
  algorithmicColorRamp: require('../../templates/renderers/symbology/algorithmicColorRamp.json')
}

function createColorRamp (breaks, inputRamp) {
  if (!breaks || breaks.length === 0) { throw new Error('Must supply breaks') }
  var rampOptions = {
    rampDetails: inputRamp || _.cloneDeep(renderers.algorithmicColorRamp),
    breakCount: breaks.length
  }
  var type = rampOptions.rampDetails.type
  if (type === 'multipart' && rampOptions.rampDetails.colorRamps) { return createMultipartRamp(rampOptions) }
  else if (type === 'algorithmic') { return createAlgorithmicRamp(rampOptions) }
  else { throw new Error('Invalid color ramp type: ', rampOptions.rampDetails.type) }
}

/**
*
* generate multipart color ramp
*
* @param {array} options
* @return {array} algorithmic colorRamps
*/
function createMultipartRamp (options) {
  // TODO: determine if we even need multipart ramps. If so, finish & write tests
  var rampDetails = options.rampDetails;
  var breakCount = options.breakCount; if ( breakCount === void 0 ) breakCount = 7;
  var type = rampDetails.type
  var colorRamps = rampDetails.colorRamps

  if (type !== 'multipart' && colorRamps.length < 1) { return }
  return colorRamps.map(function (currentRamp) {
    var rampOptions = {
      rampDetails: currentRamp,
      breakCount: breakCount
    }
    return createAlgorithmicRamp(rampOptions)
  })
}

/**
*
* generate algorithmic color ramp
*
* @param {array} options
* @return {array} colorRamp
*/
function createAlgorithmicRamp (options) {
  var rampDetails = options.rampDetails;
  var breakCount = options.breakCount;
  if (rampDetails.type !== 'algorithmic') { return }
  var colorRamp = chroma.scale([rampDetails.fromColor.slice(0, 3), rampDetails.toColor.slice(0, 3)])
  switch (rampDetails.algorithm) {
    case 'esriHSVAlgorithm': // using HSV & hsl interchangeably
      return colorRamp.mode('hsl').colors(breakCount, 'rgb')
    case 'esriCIELabAlgorithm':
      return colorRamp.mode('lab').colors(breakCount, 'rgb')
    case 'esriLabLChAlgorithm':
      return colorRamp.mode('lch').colors(breakCount, 'rgb')
    default:
      return colorRamp.mode('hsl').colors(breakCount, 'rgb')
  }
}
