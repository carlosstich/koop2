var Utils = require('./utils.js')
var ref = require('./templates');
var renderRestInfo = ref.renderRestInfo;
var renderLayer = ref.renderLayer;
var renderServer = ref.renderServer;
var ref$1 = require('./geometry');
var geometryMap = ref$1.geometryMap;

module.exports = { restInfo: restInfo, serverInfo: serverInfo, layerInfo: layerInfo, layersInfo: layersInfo }

/**
 * Pass on request for rest/info to rendering function
 * @param {object} dataSourceRestInfo rest-info object that will supplement/override templated rest/info response
 * return JSON response
 */
function restInfo (dataSourceRestInfo) {
  return renderRestInfo(dataSourceRestInfo)
}

function serverInfo (server, params) {
  if ( params === void 0 ) params = {};

  var layers
  if (server.type === 'FeatureCollection') {
    layers = [server]
  } else {
    layers = server.layers
  }
  server.extent = server.extent || Utils.getExtent(layers[0])

  var serverLayers = layers.reduce(
    function (collection, layer, i) {
      var info = serverLayerInfo(layer, i)
      if (info.geometryType) { collection.layers.push(info) }
      else { collection.tables.push(info) }
      return collection
    },
    { layers: [], tables: [] }
  )

  return renderServer(server, serverLayers)
}

function layerInfo (geojson, params) {
  return renderLayer(geojson, params)
}

function serverLayerInfo (geojson, id) {
  if ( geojson === void 0 ) geojson = {};

  var metadata = geojson.metadata || {}
  var geometryType = metadata.geometryType || Utils.getGeomType(geojson)
  return {
    id: id,
    name: metadata.name || ("Layer_" + id),
    parentLayerId: -1,
    defaultVisibility: true,
    subLayerIds: null,
    minScale: 0,
    maxScale: 0,
    geometryType: geometryMap[geometryType] || geometryType
  }
}

/**
 * Generate layer info JSON for `/layers` method call
 *
 * @param {object} server
 * @param {object} params
 */
function layersInfo (server, params) {
  if ( params === void 0 ) params = {};

  var json = { layers: [], tables: [] }
  var layers

  if (server.type === 'FeatureCollection') {
    layers = [server]
  } else if (Array.isArray(server.layers)) {
    layers = server.layers
  } else { return json }

  json.layers = layers.map(function (layer, i) {
    params.layer = i
    return renderLayer(layer, params)
  })

  return json
}
