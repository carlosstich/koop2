'use strict'
var sql = require('./sql')
var Query = require('./query')
var ref = require('./generateBreaks/index');
var calculateClassBreaks = ref.calculateClassBreaks;
var calculateUniqueValueBreaks = ref.calculateUniqueValueBreaks;

function breaksQuery (features, query, options) {
  var queriedData = standardQuery(features, query, options)
  if (queriedData === undefined || queriedData.features === undefined) { throw new Error('query response undefined') }
  if (queriedData.features.length === 0) { throw new Error('need features in order to classify') }

  var classification = options.classification
  if (classification.type === 'classes') {
    if (classification.breakCount <= 0) { throw new Error('breakCount must be positive: ' + classification.breakCount) }
    return calculateClassBreaks(queriedData.features, classification)
  } else if (classification.type === 'unique') {
    var ref = calculateUniqueValueBreaks(queriedData.features, classification);
    var options$1 = ref.options;
    var query$1 = ref.query;
    return aggregateQuery(queriedData.features, query$1, options$1)
  } else { throw new Error('unacceptable classification type: ' + classification.type) }
}

function aggregateQuery (features, query, options) {
  var params = Query.params(features, options)
  var filtered = sql(query, params)
  return finishQuery(filtered, options)
}

function standardQuery (features, query, options) {
  var params = Query.params(features, options)
  var filtered = sql(query, params)

  // Handling for limit queries; limit arrives as options "limit", "resultRecordCount", "count" or "maxFeatures
  if (options.limit) {
    var limitExceeded = false
    // options.limit is incremented by one in normalizeOptions.js; so if filtered.length === options.limit, we know
    // the original limit option has been exceeded
    if (filtered.length === options.limit) {
      limitExceeded = true
      // Now slice off the last feature, so that our feature array length is consistent with origin option
      filtered = filtered.slice(0, -1)
    }
    if (options.collection) { options.collection.metadata = Object.assign({}, options.collection.metadata, { limitExceeded: limitExceeded }) }
  }
  return finishQuery(filtered, options)
}

function finishQuery (features, options) {
  if (options.groupBy) {
    return features
  } else if (options.aggregates) {
    return features[0]
  } else if (options.collection) {
    var collection = options.collection
    collection.features = features
    return collection
  } else {
    return features
  }
}

module.exports = { breaksQuery: breaksQuery, aggregateQuery: aggregateQuery, standardQuery: standardQuery, finishQuery: finishQuery }
